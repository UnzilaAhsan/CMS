#include <iostream>
using namespace std;

class Course {
public:
    string title, id;
    int cr_hrs;

    Course() {}
    Course(string t, string i, int c) : title(t), id(i), cr_hrs(c) {}
    Course(const Course& other) : title(other.title), id(other.id), cr_hrs(other.cr_hrs) {}
    ~Course() {}

    friend ostream& operator<<(ostream& os, const Course& c) {
        os << "Course Title: " << c.title << ", ID: " << c.id << ", Credit Hours: " << c.cr_hrs << endl;
        return os;
    }
};

class Date {
public:
    int day, month, year;
    Date() {}
    Date(int d, int m, int y) {
        if (d > 0 && d <= 31 && m > 0 && m <= 12 && y > 0 && y <= 2025) {
            day = d; month = m; year = y;
        } else {
            day = month = year = 0;
        }
    }
    Date(const Date& other) : day(other.day), month(other.month), year(other.year) {}
    ~Date() {}

    friend ostream& operator<<(ostream& os, const Date& dt) {
        os << dt.day << "/" << dt.month << "/" << dt.year;
        return os;
    }
};

class Address {
public:
    string city, country;
    Address() {}
    Address(string c, string co) : city(c), country(co) {}
    Address(const Address& other) : city(other.city), country(other.country) {}
    ~Address() {}

    friend ostream& operator<<(ostream& os, const Address& a) {
        os << a.city << ", " << a.country;
        return os;
    }
};

class Name {
public:
    string first_name, last_name;
    Name() {}
    Name(string fn, string ln) : first_name(fn), last_name(ln) {}
    Name(const Name& other) : first_name(other.first_name), last_name(other.last_name) {}
    ~Name() {}

    friend ostream& operator<<(ostream& os, const Name& n) {
        os << n.first_name << " " << n.last_name;
        return os;
    }
};

class Person {
protected:
    Date dob;
    Address addr;
    Name name;
    char gender;

public:
    Person() {}
    Person(Date d, Address a, Name n, char g) : dob(d), addr(a), name(n), gender(g) {}
    Person(const Person& p) : dob(p.dob), addr(p.addr), name(p.name), gender(p.gender) {}
    ~Person() {}

    friend ostream& operator<<(ostream& os, const Person& p) {
        os << "Name: " << p.name << "\nDOB: " << p.dob << "\nAddress: " << p.addr << "\nGender: " << p.gender << endl;
        return os;
    }
};

class History {
    int course_ct;
    Course* courses;
    float experience;

public:
    History() : course_ct(0), courses(nullptr), experience(0) {}
    History(Course c[], int ct, float e) : course_ct(ct), experience(e) {
        courses = new Course[ct];
        for (int i = 0; i < ct; i++)
            courses[i] = c[i];
    }
    History(const History& other) : course_ct(other.course_ct), experience(other.experience) {
        courses = new Course[course_ct];
        for (int i = 0; i < course_ct; i++)
            courses[i] = other.courses[i];
    }
    ~History() { delete[] courses; }

    friend ostream& operator<<(ostream& os, const History& h) {
        os << "Courses in History:\n";
        for (int i = 0; i < h.course_ct; i++)
            os << h.courses[i];
        os << "Experience: " << h.experience << " years\n";
        return os;
    }
};
class Semester {
    int semester_no;
    Course* courses;
    char* grades;
    int course_ct;

public:
    Semester() : semester_no(0), courses(nullptr), grades(nullptr), course_ct(0) {}

    Semester(int no, Course* cArr, char* gArr, int ct) : semester_no(no), course_ct(ct) {
        semester_no = no;
        courses = new Course[ct];
        grades = new char[ct];
        for (int i = 0; i < ct; i++) {
            courses[i] = cArr[i];
            grades[i] = gArr[i];
        }
    }

    Semester(const Semester& s) : semester_no(s.semester_no), course_ct(s.course_ct) {
        courses = new Course[course_ct];
        grades = new char[course_ct];
        for (int i = 0; i < course_ct; i++) {
            courses[i] = s.courses[i];
            grades[i] = s.grades[i];
        }
    }

    ~Semester() {
        delete[] courses;
        delete[] grades;
    }

    int getSemesterNo() const { return semester_no; }
    int getCourseCount() const { return course_ct; }
    Course* getCourses() const { return courses; }
    char* getGrades() const { return grades; }

    friend ostream& operator<<(ostream& os, const Semester& s) {
        os << "Semester " << s.semester_no << " Results:\n";
        for (int i = 0; i < s.course_ct; i++) {
            os << s.courses[i] << "Grade: " << s.grades[i] << endl;
        }
        return os;
    }
};
class Student : public Person {
    string roll_no;
    float cgpa;
    Course* enrolled_courses;
    int enrolled_ct;
    int current_semester_no;

public:
    Student() : enrolled_courses(nullptr), enrolled_ct(0), current_semester_no(1) {}
    Student(Date d, Address a, Name n, char g, string rn, float c, int sem)
        : Person(d, a, n, g), roll_no(rn), cgpa(c), enrolled_ct(0), enrolled_courses(nullptr), current_semester_no(sem) {}

    void enrollFromSemester(Semester& s, string course_id) {
        if (s.getSemesterNo() != current_semester_no) {
            cout << "Cannot enroll: not your current semester.\n";
            return;
        }

        Course* sem_courses = s.getCourses();
        bool found = false;
        for (int i = 0; i < s.getCourseCount(); i++) {
            if (sem_courses[i].id == course_id) {
                Course* temp = new Course[enrolled_ct + 1];
                for (int j = 0; j < enrolled_ct; j++) temp[j] = enrolled_courses[j];
                temp[enrolled_ct++] = sem_courses[i];
                delete[] enrolled_courses;
                enrolled_courses = temp;
                found = true;
                break;
            }
        }
        if (!found) cout << "Course not found in semester.\n";
    }

    void drop(string course_id) {
        int index = -1;
        for (int i = 0; i < enrolled_ct; i++)
            if (enrolled_courses[i].id == course_id) { index = i; break; }

        if (index != -1) {
            Course* temp = new Course[enrolled_ct - 1];
            for (int i = 0, j = 0; i < enrolled_ct; i++)
                if (i != index) temp[j++] = enrolled_courses[i];

            enrolled_ct--;
            delete[] enrolled_courses;
            enrolled_courses = temp;
        }
    }

    ~Student() { delete[] enrolled_courses; }

    friend ostream& operator<<(ostream& os, const Student& s) {
        os << (Person&)s << "Roll No: " << s.roll_no << "\nCGPA: " << s.cgpa
           << "\nCurrent Semester: " << s.current_semester_no << "\nEnrolled Courses:\n";
        for (int i = 0; i < s.enrolled_ct; i++) os << s.enrolled_courses[i];
        return os;
    }
};

class Teacher : public Person {
    History history;
    float salary;
    Course* courses;
    int course_ct;

public:
    Teacher() : courses(nullptr), course_ct(0), salary(0) {}
    Teacher(Date d, Address a, Name n, char g, History h, float sal, Course* c, int ct)
        : Person(d, a, n, g), history(h), salary(sal), course_ct(ct) {
        courses = new Course[course_ct];
        for (int i = 0; i < course_ct; i++) courses[i] = c[i];
    }
    Teacher(const Teacher& other) : Person(other), history(other.history), salary(other.salary), course_ct(other.course_ct) {
        courses = new Course[course_ct];
        for (int i = 0; i < course_ct; i++) courses[i] = other.courses[i];
    }
    ~Teacher() { delete[] courses; }

    friend ostream& operator<<(ostream& os, const Teacher& t) {
        os << (Person&)t << "\nSalary: " << t.salary << "\n" << t.history;
        os << "Courses taught:\n";
        for (int i = 0; i < t.course_ct; i++) os << t.courses[i];
        return os;
    }
};
class Transcript {
    int total_semesters;
    Semester* semesters;
    int current_semester;

public:
    Transcript() : total_semesters(0), semesters(nullptr), current_semester(0) {}

    Transcript(Semester* sems, int count, int current) : total_semesters(count), current_semester(current) {
        semesters = new Semester[count];
        for (int i = 0; i < count; i++) {
            semesters[i] = sems[i];
        }
    }

    ~Transcript() {
        delete[] semesters;
    }

    friend ostream& operator<<(ostream& os, const Transcript& t) {
        os << "Student Transcript\n";
        os << "Current Semester: " << t.current_semester << "\n\n";
        for (int i = 0; i < t.total_semesters; i++) {
            os << t.semesters[i] << "\n";
        }
        return os;
    }
};


class DiscussionPost {
    string content;
    string author;

public:
    DiscussionPost(string a, string c) : author(a), content(c) {}
    void reply(string r) {
        cout << "Reply to [" << content << "]: " << r << endl;
    }
};

class Message {
    string sender;
    string receiver;
    string text;

public:
    Message(string s, string r, string t) : sender(s), receiver(r), text(t) {}
    void display() {
        cout << "From: " << sender << " To: " << receiver << "\nMessage: " << text << "\n";
    }
};
int main() {
    // Create some courses
    Course c1("OOP", "CS201", 3);
    Course c2("DSA", "CS202", 4);
    Course c3("DBMS", "CS203", 3);
    Course c4("Programming Fundamentals", "M101", 3);
    Course c5("Calculus I", "CS101", 4);
    Course c6("Object Oriented Programming", "O123",4);
    Course c7("MVC","V34",4);
    Course courseArr[] = {c1, c2, c3,c4,c5,c6,c7};

    // Create Date, Address, Name
    Date dob(10, 5, 2002);
    Address addr("Lahore", "Pakistan");
    Name name("Ali", "Khan");

    // Create Semester
     
    Course sem1Courses[] = {c4, c5,c3};
     char sem1Grades[] = {'A', 'B','C'};
     Semester sem1(1, sem1Courses, sem1Grades, 2);

    // Create Student and enroll courses
    Student s(dob, addr, name, 'M', "BCS123", 3.5, 1);
    s.enrollFromSemester(sem1, "CS201");
    s.enrollFromSemester(sem1, "CS202");
    s.drop("CS201");
    cout << s << endl;

    // Create History
    History history(courseArr, 3, 5.5);

    // Create Teacher
    Teacher t(dob, addr, name, 'M', history, 90000, courseArr, 3);
    cout << t << endl;

    // Create Transcript
   
   
    Course sem2Courses[]={c6,c7,c1,c2};
    char sem2Grades[]={'B','A','C','A'};
   Semester sem2(2,sem2Courses,sem2Grades,3);
    Semester allSemesters[] = {sem1,sem2};
    Transcript tr(allSemesters, 2, 3);

    cout << tr << "\n";

    // Discussion post
    DiscussionPost post("Ali", "What is polymorphism?");
    post.reply("It is the ability to take many forms.");

    // Message
    Message m("Teacher", "Student", "Please submit your assignment.");
    m.display();

    return 0;
}


/*
int main() {
    
    cout << "Date class check:\n";
    Date d(5, 10, 2000);
    cout << d << "\n\n";

    cout << "Address class check:\n";
    Address a("Lahore", "Pakistan");
    cout << a << "\n\n";

    cout << "Name class check:\n";
    Name n("Sara", "Ahmad");
    cout << n << "\n\n";

    cout << "Course class check:\n";
    Course oop("OOP", "M101", 4);
    Course pf("PF", "P202", 4);
    Course cArr[] = {oop, pf};
    for (int i = 0; i < 2; i++) cout << cArr[i];
    cout << "\n";

    cout << "Person class check:\n";
    Person p(d, a, n, 'F');
    cout << p << "\n";

    cout << "History class check:\n";
    History h(cArr, 2, 5.5);
    cout << h << "\n";

    cout << "Student class check:\n";
    Student s(d, a, n, 'M', "S123", 3.75);
    s.enroll(c1);
    s.enroll(c2);
    s.drop("M101");
    cout << s << "\n";

    cout << "Teacher class check:\n";
    Teacher t(d, a, n, 'F', h, 80000.0, cArr, 2);
    cout << t << "\n";

    cout << "Transcript class check:\n";
    char grades[] = {'A', 'B'};
    Transcript tr(cArr, grades, 2, 3.5);
    cout << tr << "\n";

    cout << "Message class check:\n";
    Message m("Teacher1", "Student1", "Please submit your assignment.");
    m.display();

    cout << "DiscussionPost class check:\n";
    DiscussionPost dp("Student2", "Can anyone explain Question 5?");
    dp.reply("Sure, I'll help you.");
    cout<<"\n\nSemester class check\n";
    // Courses for Semester 1
Course c1("Intro to Programming","M101", 3);
Course c2("Calculus I","CS101", 4);
Course sem1Courses[] = {c1, c2};
Semester sem1(1, sem1Courses, 2);

// Create Student in Semester 1
Student s(d, a, n, 'M', "S001", 3.5, 1);

// Try enrolling student in courses
s.enrollFromSemester(sem1, "CS101");
s.enrollFromSemester(sem1, "M101");
s.drop("M101");

cout << sem1 << "\n";
cout << s << "\n";

    Course c1("Programming Fundamentals", "M101", 3);
    Course c2("Calculus I", "CS101", 4);
    Course sem1Courses[] = {c1, c2};
     char sem1Grades[] = {'A', 'B'};
     Semester sem1(1, sem1Courses, sem1Grades, 2);
    Course c3("Object Oriented Programming", "O123",4);
    Course c4("MVC","V34",4);
    Course sem2Courses[]={c3,c4};
    char sem2Grades[]={'B','A'};
   Semester sem2(2,sem2Courses,sem2Grades,3);

    

    Semester allSemesters[] = {sem1,sem2};
    Transcript tr(allSemesters, 2, 3);

    cout << tr << "\n";

}
*/
